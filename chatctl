#!/bin/bash
set -o nounset

errcho() {
  echo "$@" >&2
}

show_help(){
    cat <<EOM
chatctl command line tool to install and update UniverseChat server

Usage: $(basename "$0") [options] [--root-url=ROOT_URL --port=PORT --letsencrypt-email=EMAIL --webserver=WEBSERVER  --version=VERSION --install-node --use-mongo]
Installs node, mongo, UniverseChat server and optionally a webserver (Caddy or Traefik), sets up directories and permissions to use Let's Encrypt certificates.
In case node or mongo already installed, it uses already installed versions though confirmation is required.
For node it set $NODE_VERSION as default in your system, for mongo mmapv1 storage engine and no authentication enabled is required during installation.
If you wish this script to run unattended, provide extra flags to the install option, server URL is required (--root-url).

OPTIONS
  -h help                   Display this message
  install                   Install latest UniverseChat server version
  update                    Update UniverseChat server from current version to latest version
  check-updates             Check for updates of UniverseChat server
  upgrade-chatctl     Upgrade the chatctl command line tool
  configure                 Configures UniverseChat server and Let's Encrypt
  backup                    Makes a universechat database backup

FOR UNATTENDED INSTALLATION
  --root-url=ROOT_URL       the public URL where UniverseChat server will be accessible on the Internet (REQUIRED)
  --port=PORT               port for the UniverseChat server, default value 3000   
  --webserver=WEBSERVER     webserver to install as reverse proxy for UniverseChat server, options are caddy/traefik/none (REQUIRED)
  --letsencrypt-email=EMAIL e-mail address to use for SSL certificates (REQUIRED if webserver is not none)
  --version=VERSION         UniverseChat server version to install, default latest
  --install-node            in case node installed, sets node to UniverseChat server recommended version, default behavoir cancel UniverseChat server installation
  --use-mongo               in case mongo installed, and storage engine configured is mmapv1, skip mongo installation but uses systems mongo for UniverseChat server database, 
                            default database name universechat
  --mongo-version=4.x.x     mongo 4 version, default value is latest (supported only for Debian and Ubuntu)
  --bind-loopback=value     value=(true|false) set to false to prevent from bind UniverseChat server to loopback interface when installing a webserver (default true)

FOR CONFIGURE OPTION
  --universechat --root-url=ROOT_URL --port=PORT --bind-loopback=value                  Reconfigures UniverseChat server Site-URL and port (--root-url REQUIRED)
  --lets-encrypt --root-url=ROOT_URL --letsencrypt-email=EMAIL --bind-loopback=value  Reconfigures webserver with Let's Encrypt and UniverseChat server Site-URL (--root-url and letsencrypt-email REQUIRED)

FOR BACKUP OPTION
  --dir=<path_to_dir>       sets the directory for storing the backup files, default backup directory is /tmp

EOM
}

show_short_help() {
    errcho "Run '$(basename "$0") -h' to see the full list of available options."
}

print_run_as_root_error_and_exit(){
    errcho "This script must be run as root. Cancelling"
    show_short_help
    exit 1
}

print_input_from_pipe_error_and_exit(){
    errcho "This script is interactive, it can't be run with stdin piped"
    exit 1
}

print_incorrect_parameters_error_and_exit(){
    errcho "Incorrect parameters passed. Select one option."
    echo -e ""
    show_help
    exit 2
}

error_with_no_value_specified() {
    echo "Command line option: '--${1}' must have an assigned value."
    show_short_help
}

print_distro_not_supported_error_and_exit(){
    errcho "The detected Linux distribution is not supported by chatctl."
    exit 1
}

print_mongo_version_not_supported_and_exit(){
    errcho "The detected Linux distribution does not support choosing mongo version."
    exit 1
}

print_node_version_error_and_exit(){
    errcho "Different nodejs version already exists in the system. Cancelling"
    exit 1
}

print_use_mongo_for_universechat_error_and_exit(){
    errcho "mongod already exists in the system. Cancelling"
    exit 1
}

print_mongo_storage_engine_error_and_exit(){
    errcho "Storage engine from previous mongo installation in your system is not mmapv1. Cancelling"
    exit 1
}
print_mongo_connection_failed_error_and_exit(){
    errcho "Connection failed to previous installed mongo in your system. Cancelling"
    exit 1
}

print_universechat_installed_error_and_exit(){
    errcho "UniverseChat server already installed. Cancelling"
    exit 1
}

print_root_url_error_and_exit(){
    errcho "root-url must have an assigned value. Use --root-url=<URL> for unattended install or the configure option. Cancelling"
    show_short_help
    exit 2
}

print_wrong_webserver_error_and_set_none(){
    webserver=none
    errcho "webserver assigned value should be traefik, caddy or none. Use --webserver=(traefik/caddy/none) for unattended install. Skipping webserver installation"
    echo -e ""
}

print_email_error_and_exit(){
    errcho "letsencrypt-email must have an assigned value if decided to install a webserver or use configure option. Cancelling"
    show_short_help
    exit 2
}

print_check_updates_error_and_exit(){
    errcho "Could not determine if updates available for UniverseChat server."
    exit 1
}

print_update_install_failed_error_and_exit(){
    errcho "Something went wrong backing up current UniverseChat server version before update. Cancelling"
    exit 1
}

print_upgrade_download_chatctl_error_and_exit(){
    errcho "Error downloading chatctl. Cancelling"
    exit 1
}

print_update_install_failed_exit(){
    errcho "Error in updated UniverseChat server health check, restoring backup."
    exit 1
}

print_update_backup_failed_exit(){
    errcho "Update failed, can't get UniverseChat server API in port $PORT. Cancelling"
    exit 1
}

print_download_traefik_error_and_exit(){
    errcho "Error downloading traefik. Cancelling"
    exit 1
}

print_universechat_not_running_error_and_exit(){
    errcho "UniverseChat server not running. Cancelling"
    exit 1
}

print_universechat_in_latest_version_and_exit(){
    echo "UniverseChat server already in latest version."
    exit 2
}

print_no_webserver_installed_and_exit(){
    echo "Looks like you don't have either Caddy or Traefik installed."
    exit 2
}

print_make_backup(){
    echo "Updates could be risky, you can use the backup option # chatctl backup, to create a backup of the universechat database first. Please check that you have enough space in your system to store the backup."
}

print_check_update_change_node_version(){
    echo "IMPORTANT: Update from version 2.x to 3.x requires node update, if you decide to update, your node version will change from 8.x to 12.x."
}    

print_update_available_and_exit(){
    echo "Current update available for UniverseChat server: from $current_universechat_version to $latest_universechat_version."
}

print_backup_ok(){
    echo "Backup done successfully, check for the backup file in $backup_dir/dump_$sufix.gz. You can restore using # mongorestore --host localhost:27017 --db universechat --archive --gzip < $backup_dir/dump_$sufix.gz"
}

print_backup_dir_error_and_exit(){
    echo "Can't write in the backup directory: $backup_dir"
    exit 1
}

print_node_not_updated_error_and_exit(){
    echo "Error: node version was not updated correctly. Cancelling ..."
    exit 1
}

print_done(){
    echo "Done :)"
}

command_exists() {
    command -v "$@" > /dev/null 2>&1
}

get_os_distro(){
    if [ -r /etc/os-release ]; then
        distro="$(. /etc/os-release && echo "$ID")"
        distro_version="$(. /etc/os-release && echo "$VERSION_ID")"
    fi
}

os_supported(){
    get_os_distro
    case "$distro" in
        ubuntu)
            [[ "$distro_version" =~ (("18.04"|"19.04"|"19.10"|"20.04")) ]] || print_distro_not_supported_error_and_exit
            ;;
        debian)
            [[ "$distro_version" =~ (("9"|"10")) ]] || print_distro_not_supported_error_and_exit
            ;;
        centos)
            [[ "$distro_version" =~ (("7"|"8")) ]] || print_distro_not_supported_error_and_exit
            ;;
        *)
            print_distro_not_supported_error_and_exit
            ;;
    esac
}

mongo_version_supported(){
    if  ! [ -z $MONGO_VERSION ]; then
        if ! ([ $distro == ubuntu ] || [ $distro == debian ]); then
            print_mongo_version_not_supported_and_exit
        fi
    fi
}

interactive_node(){
    if [ ${install_node_arg} -eq 0 ]; then
        read -r -p "Your current node version is $node_version. UniverseChat server uses node $NODE_VERSION.
If you decide to continue, node will be installed using npm and it will become your default system node version.
Do you want to install node anyway and use it system wide? (y/n) " install_node_answer
        echo -e ""
        [ "${install_node_answer}" == 'y' ] && install_node_arg=1 || print_node_version_error_and_exit
    fi   
}

interactive_mongo(){
    if [ ${use_mongo_arg} -eq 0 ]; then
        read -r -p "It appears you already have mongo installed, this script will skip mongo installation but can't assure successful UniverseChat server installation.
Database name for UniverseChat server will be universechat.
Would you like to use your mongo installation for the UniverseChat server database? (y/n) " use_mongo_answer
        echo -e ""
        [ ${use_mongo_answer} == 'y' ] && use_mongo_arg=1 || print_use_mongo_for_universechat_error_and_exit
    fi
}

interactive_universechat(){
    if [ -z "${ROOT_URL}" ]; then
        read -r -p "Enter ROOT_URL for your UniverseChat server installation (for example https://www.mydomain.com) : " ROOT_URL
        echo -e ""
    fi
    [ -z ${ROOT_URL} ] && print_root_url_error_and_exit
    ROOT_URL=$(echo "$ROOT_URL" | tr '[:upper:]' '[:lower:]')
}

interactive_webserver(){
    if [ ${webserver_arg} -eq 0 ]; then
        read -r -p "Select a webserver to use as a reverse proxy for your UniverseChat server installation [none]: (traefik/caddy/none) " webserver
        echo -e ""
    fi
    webserver=$(echo "$webserver" | tr '[:upper:]' '[:lower:]')
    ! [[ ${webserver} =~ ((traefik)|(caddy)|(none)) ]] && print_wrong_webserver_error_and_set_none
}

interactive_mail(){
    if [ ${webserver} != "none" ]; then
        if [ "${universe_mail_arg}" -eq 0 ]; then
            read -r -p "Enter e-mail for Let's Encrypt certificates: " universe_mail
            echo -e ""
        fi
        [ -z ${universe_mail} ] && print_email_error_and_exit
        universe_mail=$(echo "$universe_mail" | tr '[:upper:]' '[:lower:]')
    fi
}

check_arguments_unattended_install() {
    while [ $# -gt 0 ]; do
        IFS='=' read -r -a args <<< $1
        case "${args[0]}" in
            --install-node)
                install_node_arg=1
                ;;
            --use-mongo)
                use_mongo_arg=1
                ;;
            --webserver)
                if [ ${#args[@]} -ne 2 ]; then
                    error_with_no_value_specified "${args[0]}"
                    exit 2
                fi
                webserver="${args[1]}"
                webserver_arg=1
                ;;
            --letsencrypt-email)
                if [ ${#args[@]} -ne 2 ]; then
                    error_with_no_value_specified "${args[0]}"
                    exit 2
                fi
                universe_mail="${args[1]}"
                universe_mail_arg=1
                ;;
            --root-url)
                if [ ${#args[@]} -ne 2 ]; then
                    error_with_no_value_specified "${args[0]}"
                    exit 2
                fi
                ROOT_URL="${args[1]}"
                ;;
            --port)
                if [ ${#args[@]} -ne 2 ]; then
                    error_with_no_value_specified "${args[0]}"
                    exit 2
                fi
                PORT="${args[1]}"
                ;;
            --version)
                if [ ${#args[@]} -ne 2 ]; then
                    error_with_no_value_specified "${args[0]}"
                    exit 2
                fi
                VERSION="${args[1]}"
                UNIVERSECHAT_DOWNLOAD_URL="https://gitlab.com/mc2labs/universe/chat/Web/-/archive/$VERSION/Web-$VERSION.tar.gz"
                ;;
            --mongo-version)
                if [ ${#args[@]} -ne 2 ]; then
                    error_with_no_value_specified "${args[0]}"
                    exit 2
                fi
                MONGO_VERSION="${args[1]}"
                ;;
            --bind-loopback)
                if [ ${#args[@]} -ne 2 ]; then
                    error_with_no_value_specified "${args[0]}"
                    exit 2
                fi
                bind_loopback="${args[1]}"
                ;;
            *)
                show_help
                exit 2
                ;;
        esac
    shift
    done
}  

apt_install_node(){
    curl -sL $NODE_DEB_DOWNLOAD_URL | bash -
    apt-get install -y build-essential graphicsmagick
    apt-get install -y nodejs
}

yum_install_node(){
    curl -sL $NODE_RPM_DOWNLOAD_URL | bash - 
    yum install -y gcc-c++ make nodejs
    yum install -y epel-release
    yum install -y GraphicsMagick
}

npm_install_node(){
    npm install -g npm@$NPM_VERSION
    npm install -g inherits node-gyp@4.0.0 n && n $NODE_VERSION
}

apt_configure_mongo(){
    local deb_keyserver="hkp://keyserver.ubuntu.com:80"
    local deb_key="9DA31620334BD75D9DCB49F368818C72E52529D4"
    local ubuntu_mongo_url="deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse"
    local debian_mongo_url="deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/4.0 main"

    if [ "$distro" == "ubuntu" ]; then
        apt-key adv --keyserver $deb_keyserver --recv $deb_key
        echo $ubuntu_mongo_url | tee /etc/apt/sources.list.d/mongodb-org-4.0.list
    elif [ "$distro" == "debian" ]; then
        apt-get install -y dirmngr libcap2-bin
        apt-key adv --keyserver $deb_keyserver --recv $deb_key
        echo $debian_mongo_url | tee /etc/apt/sources.list.d/mongodb-org-4.0.list
    fi
}

yum_configure_mongo(){
    local yum_mongo_url="https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.0/x86_64/"
    local yum_key="https://www.mongodb.org/static/pgp/server-4.0.asc"
    cat << EOF | tee -a /etc/yum.repos.d/mongodb-org-4.0.repo
[mongodb-org-4.0]
name=MongoDB Repository
baseurl=$yum_mongo_url
gpgcheck=1
enabled=1
gpgkey=$yum_key
EOF
}

apt_install_mongo(){
    apt-get update
    if [ -z "${MONGO_VERSION}" ]; then
        apt-get install -y mongodb-org
    else
        apt-get install -y mongodb-org=$MONGO_VERSION \
        mongodb-org-server=$MONGO_VERSION \
        mongodb-org-shell=$MONGO_VERSION \
        mongodb-org-mongos=$MONGO_VERSION \
        mongodb-org-tools=$MONGO_VERSION
        echo "mongodb-org hold" | sudo dpkg --set-selections
        echo "mongodb-org-server hold" | sudo dpkg --set-selections
        echo "mongodb-org-shell hold" | sudo dpkg --set-selections
        echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
        echo "mongodb-org-tools hold" | sudo dpkg --set-selections
    fi
}

yum_install_mongo(){
    yum install -y mongodb-org
}

configure_mongo(){
    sed -i "s/^#  engine:/  engine: mmapv1/"  /etc/mongod.conf
    sed -i "s/^#replication:/replication:\n  replSetName: rs01/" /etc/mongod.conf
    if ! grep -Fq "  fork: true" /etc/mongod.conf; then
        sed -i "/^processManagement:/a\  fork: true" /etc/mongod.conf
    fi
}

create_mongo_systemd_file(){
    mkdir /etc/systemd/system/mongod.service.d/
    cat << EOF | tee -a /etc/systemd/system/mongod.service.d/mongod.conf
[Service]
Type=oneshot
RemainAfterExit=yes
EOF
}

initiate_and_start_mongo(){
    systemctl daemon-reload
    systemctl enable mongod
    systemctl start mongod
    if [ -n $(pgrep mongod) ]; then
        mongo --eval "printjson(rs.initiate())"
    fi
}

install_universechat(){
    curl -L $UNIVERSECHAT_DOWNLOAD_URL?private_token=$gitlab_token -o /tmp/universe.chat.tgz
    tar -xzf /tmp/universe.chat.tgz -C /tmp
    cd /tmp/bundle/programs/server && npm install
    # add npm install node-gyp@5.0.1 to fix 4 moderate severity vulnerabilities
    mv /tmp/bundle $UNIVERSECHAT_DIR
    rm /tmp/universe.chat.tgz
}

set_universechat_user_and_permissions(){
    id -un universechat 1>/dev/null 2>&1
    if [ $? -ne 0 ] ; then
        useradd -M universechat && usermod -L universechat
    fi
    chown -R universechat:universechat $UNIVERSECHAT_DIR
}

create_universechat_systemd_file(){
    if [ -f /lib/systemd/system/universechat.service ]; then
        true > /lib/systemd/system/universechat.service
    fi
    if [[ $webserver != "none" ]] && $bind_loopback; then
        BIND_IP="127.0.0.1"
    fi
    if [[ $distro == "centos" ]]; then
        node_path="/usr/local/bin/node"
    fi
    cat << EOF | tee -a /lib/systemd/system/universechat.service
[Unit]
Description=The Universe.Chat server
After=network.target remote-fs.target nss-lookup.target mongod.service
[Service]
ExecStart=$node_path /opt/Universe.Chat/bundle/main.js
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=universechat
User=universechat
Environment=MONGO_URL=$MONGO_URL
Environment=MONGO_OPLOG_URL=$MONGO_OPLOG_URL
Environment=ROOT_URL=$ROOT_URL
Environment=PORT=$PORT
Environment=BIND_IP=$BIND_IP
Environment=DEPLOY_PLATFORM=chatctl
[Install]
WantedBy=multi-user.target
EOF
}

start_universechat(){
    systemctl daemon-reload
    systemctl enable universechat
    systemctl start universechat
}

restart_universechat(){
    systemctl daemon-reload
    systemctl restart universechat
}

get_universechat_domain(){
    universe_domain=$(echo $ROOT_URL | awk -F[/:] '{print $4}')
}

traefik_config_file(){
    if [ -f /etc/traefik/traefik.toml ]; then
        sufix=$(date +%s)
        cp /etc/traefik/traefik.toml /etc/traefik/traefik.toml.$sufix
        if [ $? == 0 ]; then
            true > /etc/traefik/traefik.toml
        fi
    fi
    cat << EOF | tee -a /etc/traefik/traefik.toml
defaultEntryPoints = ["https","http"]

[entryPoints]
  [entryPoints.http]
  address = ":80"
    [entryPoints.http.redirect]
      entryPoint = "https"
  [entryPoints.https]
  address = ":443"
    [entryPoints.https.tls]

[file]

[backends]
  [backends.universechat]
    [backends.universechat.servers.server1]
       url = "http://localhost:$PORT"

[frontends]
  [frontends.universechat]
      backend = "universechat"
      passHostHeader = true
      [frontends.universechat.routes.route0]
          rule = "Host:$universe_domain"

[acme]
email = "$universe_mail"
storage = "etc/traefik/acme/acme.json"
caServer = "https://acme-v02.api.letsencrypt.org/directory"
entryPoint = "https"
  [acme.httpChallenge]
  entryPoint = "http"

[[acme.domains]]
  main = "$universe_domain"
EOF
}

traefik_systemd_file(){
    cat << EOF | tee -a /lib/systemd/system/traefik.service
[Unit]
Description=Traefik
Documentation=https://docs.traefik.io
After=network-online.target
AssertFileIsExecutable=/usr/local/bin/traefik
AssertPathExists=/etc/traefik/traefik.toml

[Service]
User=traefik
Group=traefik
AmbientCapabilities=CAP_NET_BIND_SERVICE
CapabilityBoundingSet=CAP_NET_BIND_SERVICE

# configure service behavior
Type=notify
ExecStart=/usr/local/bin/traefik --configFile=/etc/traefik/traefik.toml
Restart=on-abnormal
WatchdogSec=1s

# lock down system access
# prohibit any operating system and configuration modification
ProtectSystem=full
# create separate, new (and empty) /tmp and /var/tmp filesystems
PrivateTmp=true
# make /home directories inaccessible
ProtectHome=true
# turns off access to physical devices (/dev/...)
PrivateDevices=false
# make kernel settings (procfs and sysfs) read-only
#ProtectKernelTunables=true
# make cgroups /sys/fs/cgroup read-only
#ProtectControlGroups=true

# allow writing of acme.json
ReadWritePaths=/etc/traefik/acme/acme.json
ReadWritePaths=/etc/traefik/acme
# depending on log and entrypoint configuration, you may need to allow writing to other paths, too

# limit number of processes in this unit
#LimitNPROC=1

[Install]
WantedBy=multi-user.target
EOF
}

install_traefik(){
    curl -L $TRAEFIK_DOWNLOAD_URL -o /tmp/traefik
    if [[ $? == 0 ]]; then
        mv /tmp/traefik /usr/local/bin/
    else
        print_download_traefik_error_and_exit
    fi
    useradd -r -s /bin/false -U -M traefik
    chown root:root /usr/local/bin/traefik
    chmod 755 /usr/local/bin/traefik
    setcap 'cap_net_bind_service=+ep' /usr/local/bin/traefik
    mkdir /etc/traefik
    mkdir /etc/traefik/acme
    touch /etc/traefik/acme/acme.json
    chown -R root:root /etc/traefik
    chown -R traefik:traefik /etc/traefik/acme
    chmod 600 /etc/traefik/acme/acme.json
    
    get_universechat_domain
    traefik_config_file
    chown root:root /etc/traefik/traefik.toml
    chmod 644 /etc/traefik/traefik.toml
    
    traefik_systemd_file
    chown root:root /lib/systemd/system/traefik.service
    chmod 644 /lib/systemd/system/traefik.service
    systemctl daemon-reload
    systemctl enable traefik.service
    systemctl start traefik.service
}

caddy_config_file(){
    if [ -f /etc/caddy/Caddyfile ]; then
        sufix=$(date +%s)
        cp /etc/caddy/Caddyfile /etc/caddy/Caddyfile.$sufix
        if [ $? == 0 ]; then
            true > /etc/caddy/Caddyfile
        fi
    fi
    cat << EOF | tee -a /etc/caddy/Caddyfile
$ROOT_URL
proxy / localhost:$PORT {
  websocket
  transparent
}
EOF
}

caddy_systemd_file(){
    if [ -f /lib/systemd/system/caddy.service ]; then
        sufix=$(date +%s)
        cp /lib/systemd/system/caddy.service /etc/caddy/caddy.service.$sufix
        if [ $? == 0 ]; then
            true > /lib/systemd/system/caddy.service
        fi
    fi
    cat << EOF | tee -a /lib/systemd/system/caddy.service
[Unit]
Description=Caddy HTTP/2 web server
Documentation=https://caddyserver.com/docs
After=network-online.target
Wants=network-online.target systemd-networkd-wait-online.service

[Service]
Restart=on-abnormal

; User and group the process will run as.
User=caddy
Group=caddy

; Letsencrypt-issued certificates will be written to this directory.
Environment=CADDYPATH=/etc/caddy/ssl

; Always set "-root" to something safe in case it gets forgotten in the Caddyfile.
ExecStart=/usr/local/bin/caddy -log stdout -agree=true -conf=/etc/caddy/Caddyfile -email=$universe_mail
ExecReload=/bin/kill -USR1 \$MAINPID

; Use graceful shutdown with a reasonable timeout
KillMode=mixed
KillSignal=SIGQUIT
TimeoutStopSec=5s

; Limit the number of file descriptors.
LimitNOFILE=1048576
; Unmodified caddy is not expected to use more than that.
LimitNPROC=512

; Use private /tmp and /var/tmp, which are discarded after caddy stops.
PrivateTmp=true
; Use a minimal /dev (May bring additional security if switched to 'true', but it may not work on Raspberry Pi's or other devices, so it has been disabled in this dist.)
PrivateDevices=false
; Hide /home, /root, and /run/user. Nobody will steal your SSH-keys.
ProtectHome=true
; Make /usr, /boot, /etc and possibly some more folders read-only.
ProtectSystem=full
; … except /etc/ssl/caddy, because we want Letsencrypt-certificates there.
;   This merely retains r/w access rights, it does not add any new. Must still be writable on the host!
ReadWriteDirectories=/etc/caddy/ssl

; The following additional security directives only work with systemd v229 or later.
; They further restrict privileges that can be gained by caddy. Uncomment if you like.
; Note that you may have to add capabilities required by any plugins in use.
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_BIND_SERVICE
;NoNewPrivileges=true

[Install]
WantedBy=multi-user.target
EOF
}

install_caddy(){
    curl -L $CADDY_DOWNLOAD_URL -o /tmp/caddy.tar.gz
    tar -xzf /tmp/caddy.tar.gz -C /tmp
    mv /tmp/caddy /usr/local/bin
    rm /tmp/caddy.tar.gz
    chown root:root /usr/local/bin/caddy
    chmod 755 /usr/local/bin/caddy
    setcap cap_net_bind_service=+ep $(which caddy)
    mkdir /etc/caddy
    mkdir /etc/caddy/ssl
    chown -R root:root /etc/caddy
    useradd -r -s /bin/false -U -M caddy
    chown -R caddy:caddy /etc/caddy/ssl

    caddy_config_file
    chown root:root /etc/caddy/Caddyfile
    chmod 644 /etc/caddy/Caddyfile
    
    caddy_systemd_file
    chown root:root /lib/systemd/system/caddy.service
    chmod 644 /lib/systemd/system/caddy.service
    systemctl daemon-reload
    systemctl enable caddy.service
    systemctl start caddy.service
}

get_universechat_latest_version(){
    if ! command_exists curl; then
        apt-get install -y curl
    fi
    latest_universechat_version=$(curl $UNIVERSECHAT_VERSION_INFO_URL?private_token=$gitlab_token 2>/dev/null |grep -w tag |awk -F: '{print $2}'|awk -F'"' '{print $2}')
}

get_universechat_current_version(){
    if systemctl status universechat > /dev/null 2>&1; then
        PORT=$(cat /lib/systemd/system/universechat.service |grep PORT |awk -F= '{print $3}')
        current_universechat_version=$(curl http://localhost:$PORT/api/info 2>/dev/null |cut -d\" -f4)
    else
        print_universechat_not_running_error_and_exit
    fi
}

version_gt() { 
    test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

universechat_health_check(){
    local count=0
    while ! ([ $universe_healthy -eq  1 ] || [ $count -eq 150 ]); do
        get_universechat_current_version
        [[ $current_universechat_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && universe_healthy=1
        sleep 2
        ((count++))
        echo "Waiting up to 5 minutes for UniverseChat server to be active ... $(($count * 2))"
    done
}

do_setup(){
    # checks system before install: node, mongo, universechat
    # assigns user's values
    # node
    if command_exists node;  then
        node_version=$(node --version 2>/dev/null)
        if [ "$node_version" != "$NODE_VERSION" ]; then
            interactive_node
        fi
    else
        install_node=1
    fi
    # mongo
    if command_exists mongod; then
        if [[ -n $(pgrep mongod) ]]; then
            mongo --eval "printjson(db.getUsers())" | grep "Error: command usersInfo requires authentication"
            if [ $? -eq 1 ]; then
                storage=$(mongo --eval "printjson(db.serverStatus().storageEngine)" |grep name |awk -F: '{print $2}'|tr -d , |tr -d \")
                if [ $storage == "mmapv1" ]; then
                    interactive_mongo
                else
                    print_mongo_storage_engine_error_and_exit
                fi
            else
                print_mongo_connection_failed_error_and_exit
            fi
        else
            print_mongo_connection_failed_error_and_exit    
        fi
    else
        mongo_version_supported
        install_mongo=1
    fi
    # universechat
    systemctl status universechat > /dev/null 2>&1
    if [ $? -eq 4 ]; then
        interactive_universechat
    else
        print_universechat_installed_error_and_exit
    fi
    # webserver
    interactive_webserver
    interactive_mail
}

do_install(){
    case "$distro" in
        ubuntu|debian)
            apt-get -y update
            apt-get install -y curl
            # node
            if [ $install_node -eq 1 ]; then
                apt_install_node
                npm_install_node
            elif [ $install_node_arg -eq 1 ]; then
                npm_install_node
            fi
            # mongo
            if [ $install_mongo -eq 1 ]; then
                apt_configure_mongo
                apt_install_mongo
                configure_mongo   
                create_mongo_systemd_file
                initiate_and_start_mongo
            fi
            ;;
        centos)
            yum -y check-update
            yum install -y curl
            # node
            if [ $install_node -eq 1 ]; then
                yum_install_node
                npm_install_node
            elif [ $install_node_arg -eq 1 ]; then
                npm_install_node
            fi
            # mongo
            if [ $install_mongo -eq 1 ]; then
                yum_configure_mongo
                yum_install_mongo
                configure_mongo   
                initiate_and_start_mongo
            fi
            ;;
        *)
            print_distro_not_supported_error_and_exit
            ;;
    esac
    # universechat
    if ! [ -d ${UNIVERSECHAT_DIR} ]; then
        install_universechat
        set_universechat_user_and_permissions
        create_universechat_systemd_file
        start_universechat
    else
        print_universechat_installed_error_and_exit
    fi
    # webserver
    case "$webserver" in
        traefik)
            install_traefik
            ;;
        caddy)
            install_caddy
            ;;
    esac
    print_done
}
        
do_check_updates(){
    get_universechat_latest_version
    get_universechat_current_version
    print_make_backup
    if ([[ $current_universechat_version =~ ^([0-2]\..\..)$ ]] && [[ ${latest_universechat_version:0:2} -eq 3 ]]); then
        update_node=1
        print_check_update_change_node_version
        print_update_available_and_exit
    elif version_gt $latest_universechat_version $current_universechat_version; then
        print_update_available_and_exit
    elif [ $latest_universechat_version == $current_universechat_version ]; then
        print_universechat_in_latest_version_and_exit
    else
        print_check_updates_error_and_exit
    fi
}                

do_update(){
    if [ $update_node -eq 1 ]; then
        do_update_node
    fi
    mv $UNIVERSECHAT_DIR $UNIVERSECHAT_DIR_UPDATE
    if [ $? == 0 ]; then
        systemctl stop universechat
        install_universechat
        set_universechat_user_and_permissions
        systemctl start universechat
        universechat_health_check
        if [ $universe_healthy -eq 1 ]; then
            rm -rf $UNIVERSECHAT_DIR_UPDATE
            echo "UniverseChat server updated to latest version :)"
            exit 0
        else
            rm -rf $UNIVERSECHAT_DIR && mv $UNIVERSECHAT_DIR_UPDATE $UNIVERSECHAT_DIR
            systemctl restart universechat
            print_update_install_failed_exit
        fi
    else
        print_update_backup_failed_exit
    fi
}

check_node_major_version(){
    major_version=${NODE_VERSION:1:2}
    [[ $(node -v) =~ ^v$major_version\.[0-9]+\.[0-9]+$ ]]
}

do_update_node(){
    case "$distro" in
        ubuntu|debian)
            apt_install_node
            ;;
        centos)
            yum_install_node
            ;;
        *)
            ;;
    esac
    npm_install_node
    check_node_major_version || print_node_not_updated_error_and_exit 
}

do_upgrade_chatctl(){
    curl -L $CHATCTL_DOWNLOAD_URL?private_token=$gitlab_token -o /tmp/chatctl
    if  [ $? != 0 ]; then
        print_upgrade_download_chatctl_error_and_exit
    fi
    if cmp -s $CHATCTL_DIRECTORY/chatctl /tmp/chatctl; then
        rm /tmp/chatctl
        echo "chatctl already in latest version."
        exit 0
    else
        mv /tmp/chatctl $CHATCTL_DIRECTORY/
        chmod 755 $CHATCTL_DIRECTORY/chatctl
        echo "chatctl upgraded to latest version."
        exit 0
    fi
}

check_arguments_configure(){
    case $1 in
        --universechat)
            configure_universechat=1
            shift
            while [ $# -gt 0 ]; do
                IFS='=' read -r -a args <<< $1
                case "${args[0]}" in
                    --root-url)
                        if [ ${#args[@]} -ne 2 ]; then
                            error_with_no_value_specified "${args[0]}"
                            exit 2
                        fi
                        ROOT_URL="${args[1]}"
                        root_url_arg=1
                        ;;
                    --port)
                        if [ ${#args[@]} -ne 2 ]; then
                            error_with_no_value_specified "${args[0]}"
                            exit 2
                        fi
                        PORT="${args[1]}"
                        ;;
                    --bind-loopback)
                        if [ ${#args[@]} -ne 2 ]; then
                            error_with_no_value_specified "${args[0]}"
                            exit 2
                        fi
                        bind_loopback="${args[1]}"
                        bind_loopback_arg=1
                        ;;
                    *)
                        show_help
                        exit 2
                        ;;
                esac
                shift
            done
            ;;
        --lets-encrypt)
            configure_webserver=1
            shift
            while [ $# -gt 0 ]; do
                IFS='=' read -r -a args <<< $1
                case "${args[0]}" in
                    --root-url)
                        if [ ${#args[@]} -ne 2 ]; then
                            error_with_no_value_specified "${args[0]}"
                            exit 2
                        fi
                        ROOT_URL="${args[1]}"
                        root_url_arg=1
                        ;;
                    --letsencrypt-email)
                        if [ ${#args[@]} -ne 2 ]; then
                            error_with_no_value_specified "${args[0]}"
                            exit 2
                        fi
                        universe_mail="${args[1]}"
                        universe_mail_arg=1
                        ;;
                    --bind-loopback)
                        if [ ${#args[@]} -ne 2 ]; then
                            error_with_no_value_specified "${args[0]}"
                            exit 2
                        fi
                        bind_loopback="${args[1]}"
                        bind_loopback_arg=1
                        ;;
                    *)
                        show_help
                        exit 2
                        ;;
                esac
                shift
            done
        ;;
        *)
            show_help
            exit 2
            ;;
    esac
}

update_universechat_systemd_file(){
    ROOT_URL_REPLACED=$(echo ${ROOT_URL//\//\\/})
    sed -i "/^Environment=ROOT_URL=/c\Environment=ROOT_URL=$ROOT_URL_REPLACED" /lib/systemd/system/universechat.service
    sed -i "/^Environment=PORT=/c\Environment=PORT=$PORT"  /lib/systemd/system/universechat.service
    if [ "${bind_loopback_arg}" -eq 1 ] || [ "${configure_webserver}" -eq 1 ] ; then
        [[ $bind_loopback == true ]] && BIND_IP=127.0.0.1 || BIND_IP=0.0.0.0
        sed -i "/^Environment=BIND_IP=/c\Environment=BIND_IP=$BIND_IP"  /lib/systemd/system/universechat.service
    fi
}

do_configure_universechat(){
    if [ "${root_url_arg}" -eq 1 ]; then
        siteurl_update_query="db.universechat_settings.update({\"_id\":\"Site_Url\"}, {\$set:{\"value\": \"${ROOT_URL}\"}});"
        mongo_cmd_str=$(echo "mongo universechat --eval '${siteurl_update_query}'")
        eval ${mongo_cmd_str}
        update_universechat_systemd_file
        restart_universechat
    else
        print_root_url_error_and_exit
    fi
}

get_webserver_installed(){
    if ([ -f /etc/caddy/Caddyfile ] && [ ! -f /etc/traefik/traefik.toml ]); then
        webserver=caddy
    elif ([ ! -f /etc/caddy/Caddyfile ] && [ -f /etc/traefik/traefik.toml ]); then
        webserver=traefik
    else
        print_no_webserver_installed_and_exit
    fi
}

do_configure(){
    if [ "${configure_universechat}" -eq 1 ]; then
        get_webserver_installed
        do_configure_universechat
    elif ([ "${configure_webserver}" -eq 1 ]  && [ "${universe_mail_arg}" -eq 1 ]); then
        get_webserver_installed
        PORT=$(cat /lib/systemd/system/universechat.service |grep PORT |awk -F= '{print $3}')
        do_configure_universechat
        case "$webserver" in
            traefik)
                get_universechat_domain
                traefik_config_file
                systemctl restart traefik.service
                ;;
            caddy)
                caddy_config_file
                caddy_systemd_file
                systemctl daemon-reload
                systemctl restart caddy.service
                ;;
            *)
                print_no_webserver_installed_and_exit
                ;;
        esac
    else
        print_email_error_and_exit
    fi
}

check_arguments_backup(){
    while [ $# -gt 0 ]; do
        IFS='=' read -r -a args <<< $1
        case "${args[0]}" in
            --dir)
                if [ ${#args[@]} -ne 2 ]; then
                    error_with_no_value_specified "${args[0]}"
                    exit 2
                fi
                backup_dir="${args[1]}"
                ;;
            *)
                show_help
                exit 2
                ;;
        esac
        shift
    done
}

check_bkup_dir(){
    touch $backup_dir/testfile_$sufix.txt /dev/null 2>&1
    [[ $? -ne 0 ]] && print_backup_dir_error_and_exit || rm $backup_dir/testfile_$sufix.txt
}

do_backup(){
    check_bkup_dir
    systemctl stop universechat
    mongodump --host localhost:27017 --db universechat --archive --gzip \
    | cat > $backup_dir/dump_$sufix.gz
    if [ $? == 0 ]; then
        systemctl start universechat
        [ -s $backup_dir/dump_$sufix.gz ] && print_backup_ok || print_backup_error_and_exit
    else
        print_empty_backup_error_and_exit
    fi
}

main() {
    # Pre-release Q3 2020 - Canary - 3.8.0-canary.rc.0
    local VERSION=$UNIVERSE_CHAT_VERSION || "Web-3.8.0-canary.0"
    local VERSION_FILENAME="universe.chat.latest.tar.gz"
    # Temp GitLab key
    local GLKEY="pKsf_bUjQ6C5NJevR8mn"
    local -r NODE_VERSION="v12.14.0"
    local -r NPM_VERSION="6.13.4"
    local MONGO_VERSION=""
    local -r MONGO_URL="mongodb://localhost:27017/universechat?replicaSet=rs01"
    local -r MONGO_OPLOG_URL="mongodb://localhost:27017/local?replicaSet=rs01"

    local UNIVERSECHAT_DOWNLOAD_URL="https://github.com/MC2-Universe/releases/releases/download/$VERSION/$VERSION_FILENAME"
    local -r NODE_DEB_DOWNLOAD_URL="https://deb.nodesource.com/setup_12.x"
    local -r NODE_RPM_DOWNLOAD_URL="https://rpm.nodesource.com/setup_12.x"
    local -r UNIVERSECHAT_DIR="/opt/Universe.Chat"
    local -r UNIVERSECHAT_DIR_UPDATE="/opt/Universe.Chat.bkup"
    local -r UNIVERSECHAT_VERSION_INFO_URL="https://github.com/MC2-Universe/releases/releases/tag/$VERSION"
     
    local -r CHATCTL_DOWNLOAD_URL="https://raw.githubusercontent.com/MC2-Universe/chatctl/master/chatctl"
    local -r CHATCTL_DIRECTORY="/usr/local/bin"
    local -r CHATCTL_TEMP_DIRECTORY="/tmp"
    
    local -r TRAEFIK_DOWNLOAD_URL="https://github.com/containous/traefik/releases/download/v1.7.20/traefik"
    local -r CADDY_DOWNLOAD_URL="https://github.com/mholt/caddy/releases/download/v1.0.0/caddy_v1.0.0_linux_amd64.tar.gz"
    
    local distro=""
    local distro_version=""
    local install_node=0
    local install_mongo=0
    local universe_healthy=0

    local ROOT_URL=""
    local PORT=3000
    local BIND_IP="0.0.0.0"
    local bind_loopback=true
    local webserver=none
    local install_node_arg=0
    local gitlab_token=$GITLAB_API_TOKEN
    local use_mongo_arg=0
    local webserver_arg=0
    local universe_mail_arg=0
    local bind_loopback_arg=0
    local universe_domain=""
    local configure_universechat=0
    local configure_webserver=0
    local root_url_arg=0
    local sufix=$(date +%s)
    local node_path="/usr/bin/node"
    local backup_dir="/tmp"
    local update_node=0
    
    [ ${EUID} -ne 0 ] && print_run_as_root_error_and_exit
    [ $# -lt 1 ] && print_incorrect_parameters_error_and_exit
    ! [[ -t 0 ]] && print_input_from_pipe_error_and_exit
    case $1 in
        --help|-h)
            show_help
            ;;
        install)
            os_supported
            shift
            check_arguments_unattended_install $@
            do_setup
            do_install
            ;;
        check-updates)
            do_check_updates
            ;;
        update)
            os_supported
            if do_check_updates; then
                do_update            
            fi
            ;;
        upgrade-chatctl)
            do_upgrade_chatctl
            ;;
        configure)
            shift
            check_arguments_configure $@
            do_configure
            ;;
        backup)
            shift
            check_arguments_backup $@
            do_backup
            ;;
        *)
            show_help
            exit 2
            ;;
    esac

}

main "$@"
